// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cow: (where?: CowWhereInput) => Promise<boolean>;
  herd: (where?: HerdWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cow: (where: CowWhereUniqueInput) => CowNullablePromise;
  cows: (args?: {
    where?: CowWhereInput;
    orderBy?: CowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cow>;
  cowsConnection: (args?: {
    where?: CowWhereInput;
    orderBy?: CowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CowConnectionPromise;
  herd: (where: HerdWhereUniqueInput) => HerdNullablePromise;
  herds: (args?: {
    where?: HerdWhereInput;
    orderBy?: HerdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Herd>;
  herdsConnection: (args?: {
    where?: HerdWhereInput;
    orderBy?: HerdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HerdConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCow: (data: CowCreateInput) => CowPromise;
  updateCow: (args: {
    data: CowUpdateInput;
    where: CowWhereUniqueInput;
  }) => CowPromise;
  updateManyCows: (args: {
    data: CowUpdateManyMutationInput;
    where?: CowWhereInput;
  }) => BatchPayloadPromise;
  upsertCow: (args: {
    where: CowWhereUniqueInput;
    create: CowCreateInput;
    update: CowUpdateInput;
  }) => CowPromise;
  deleteCow: (where: CowWhereUniqueInput) => CowPromise;
  deleteManyCows: (where?: CowWhereInput) => BatchPayloadPromise;
  createHerd: (data: HerdCreateInput) => HerdPromise;
  updateHerd: (args: {
    data: HerdUpdateInput;
    where: HerdWhereUniqueInput;
  }) => HerdPromise;
  updateManyHerds: (args: {
    data: HerdUpdateManyMutationInput;
    where?: HerdWhereInput;
  }) => BatchPayloadPromise;
  upsertHerd: (args: {
    where: HerdWhereUniqueInput;
    create: HerdCreateInput;
    update: HerdUpdateInput;
  }) => HerdPromise;
  deleteHerd: (where: HerdWhereUniqueInput) => HerdPromise;
  deleteManyHerds: (where?: HerdWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cow: (
    where?: CowSubscriptionWhereInput
  ) => CowSubscriptionPayloadSubscription;
  herd: (
    where?: HerdSubscriptionWhereInput
  ) => HerdSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CowOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "height_ASC"
  | "height_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "heal_ASC"
  | "heal_DESC"
  | "device_ASC"
  | "device_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HerdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "image_ASC"
  | "image_DESC"
  | "location_ASC"
  | "location_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "profession_ASC"
  | "profession_DESC"
  | "localisation_ASC"
  | "localisation_DESC"
  | "nativeCountry_ASC"
  | "nativeCountry_DESC"
  | "residentCountry_ASC"
  | "residentCountry_DESC"
  | "others_ASC"
  | "others_DESC"
  | "password_ASC"
  | "password_DESC"
  | "status_ASC"
  | "status_DESC"
  | "reset_password_token_ASC"
  | "reset_password_token_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CowUpdateInput {
  height?: Maybe<Float>;
  weight?: Maybe<Float>;
  heal?: Maybe<Int>;
  herd?: Maybe<HerdUpdateOneRequiredWithoutCowsInput>;
  images?: Maybe<CowUpdateimagesInput>;
  device?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export type CowWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  device?: Maybe<String>;
}>;

export interface CowUpdateManyWithoutHerdInput {
  create?: Maybe<CowCreateWithoutHerdInput[] | CowCreateWithoutHerdInput>;
  delete?: Maybe<CowWhereUniqueInput[] | CowWhereUniqueInput>;
  connect?: Maybe<CowWhereUniqueInput[] | CowWhereUniqueInput>;
  set?: Maybe<CowWhereUniqueInput[] | CowWhereUniqueInput>;
  disconnect?: Maybe<CowWhereUniqueInput[] | CowWhereUniqueInput>;
  update?: Maybe<
    | CowUpdateWithWhereUniqueWithoutHerdInput[]
    | CowUpdateWithWhereUniqueWithoutHerdInput
  >;
  upsert?: Maybe<
    | CowUpsertWithWhereUniqueWithoutHerdInput[]
    | CowUpsertWithWhereUniqueWithoutHerdInput
  >;
  deleteMany?: Maybe<CowScalarWhereInput[] | CowScalarWhereInput>;
  updateMany?: Maybe<
    CowUpdateManyWithWhereNestedInput[] | CowUpdateManyWithWhereNestedInput
  >;
}

export interface CowUpdateManyMutationInput {
  height?: Maybe<Float>;
  weight?: Maybe<Float>;
  heal?: Maybe<Int>;
  images?: Maybe<CowUpdateimagesInput>;
  device?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface HerdUpdateInput {
  herdsman?: Maybe<UserUpdateOneRequiredInput>;
  image?: Maybe<String>;
  location?: Maybe<String>;
  cows?: Maybe<CowUpdateManyWithoutHerdInput>;
  status?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CowCreateWithoutHerdInput {
  id?: Maybe<ID_Input>;
  height: Float;
  weight: Float;
  heal: Int;
  images?: Maybe<CowCreateimagesInput>;
  device?: Maybe<String>;
  status: Boolean;
}

export interface HerdSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HerdWhereInput>;
  AND?: Maybe<HerdSubscriptionWhereInput[] | HerdSubscriptionWhereInput>;
  OR?: Maybe<HerdSubscriptionWhereInput[] | HerdSubscriptionWhereInput>;
  NOT?: Maybe<HerdSubscriptionWhereInput[] | HerdSubscriptionWhereInput>;
}

export interface HerdWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  herdsman?: Maybe<UserWhereInput>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  cows_every?: Maybe<CowWhereInput>;
  cows_some?: Maybe<CowWhereInput>;
  cows_none?: Maybe<CowWhereInput>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HerdWhereInput[] | HerdWhereInput>;
  OR?: Maybe<HerdWhereInput[] | HerdWhereInput>;
  NOT?: Maybe<HerdWhereInput[] | HerdWhereInput>;
}

export interface CowSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CowWhereInput>;
  AND?: Maybe<CowSubscriptionWhereInput[] | CowSubscriptionWhereInput>;
  OR?: Maybe<CowSubscriptionWhereInput[] | CowSubscriptionWhereInput>;
  NOT?: Maybe<CowSubscriptionWhereInput[] | CowSubscriptionWhereInput>;
}

export interface CowCreateInput {
  id?: Maybe<ID_Input>;
  height: Float;
  weight: Float;
  heal: Int;
  herd: HerdCreateOneWithoutCowsInput;
  images?: Maybe<CowCreateimagesInput>;
  device?: Maybe<String>;
  status: Boolean;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  profession?: Maybe<String>;
  localisation?: Maybe<String>;
  nativeCountry?: Maybe<String>;
  residentCountry?: Maybe<String>;
  others?: Maybe<String>;
  password?: Maybe<String>;
  status?: Maybe<Boolean>;
  reset_password_token?: Maybe<String>;
}

export interface HerdCreateOneWithoutCowsInput {
  create?: Maybe<HerdCreateWithoutCowsInput>;
  connect?: Maybe<HerdWhereUniqueInput>;
}

export interface CowUpdateManyDataInput {
  height?: Maybe<Float>;
  weight?: Maybe<Float>;
  heal?: Maybe<Int>;
  images?: Maybe<CowUpdateimagesInput>;
  device?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface HerdCreateWithoutCowsInput {
  id?: Maybe<ID_Input>;
  herdsman: UserCreateOneInput;
  image?: Maybe<String>;
  location?: Maybe<String>;
  status: Boolean;
}

export interface CowUpdateManyWithWhereNestedInput {
  where: CowScalarWhereInput;
  data: CowUpdateManyDataInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CowUpsertWithWhereUniqueWithoutHerdInput {
  where: CowWhereUniqueInput;
  update: CowUpdateWithoutHerdDataInput;
  create: CowCreateWithoutHerdInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  phone: String;
  profession: String;
  localisation: String;
  nativeCountry: String;
  residentCountry: String;
  others: String;
  password: String;
  status: Boolean;
  reset_password_token?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
}>;

export interface CowCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CowCreateManyWithoutHerdInput {
  create?: Maybe<CowCreateWithoutHerdInput[] | CowCreateWithoutHerdInput>;
  connect?: Maybe<CowWhereUniqueInput[] | CowWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  profession?: Maybe<String>;
  profession_not?: Maybe<String>;
  profession_in?: Maybe<String[] | String>;
  profession_not_in?: Maybe<String[] | String>;
  profession_lt?: Maybe<String>;
  profession_lte?: Maybe<String>;
  profession_gt?: Maybe<String>;
  profession_gte?: Maybe<String>;
  profession_contains?: Maybe<String>;
  profession_not_contains?: Maybe<String>;
  profession_starts_with?: Maybe<String>;
  profession_not_starts_with?: Maybe<String>;
  profession_ends_with?: Maybe<String>;
  profession_not_ends_with?: Maybe<String>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  nativeCountry?: Maybe<String>;
  nativeCountry_not?: Maybe<String>;
  nativeCountry_in?: Maybe<String[] | String>;
  nativeCountry_not_in?: Maybe<String[] | String>;
  nativeCountry_lt?: Maybe<String>;
  nativeCountry_lte?: Maybe<String>;
  nativeCountry_gt?: Maybe<String>;
  nativeCountry_gte?: Maybe<String>;
  nativeCountry_contains?: Maybe<String>;
  nativeCountry_not_contains?: Maybe<String>;
  nativeCountry_starts_with?: Maybe<String>;
  nativeCountry_not_starts_with?: Maybe<String>;
  nativeCountry_ends_with?: Maybe<String>;
  nativeCountry_not_ends_with?: Maybe<String>;
  residentCountry?: Maybe<String>;
  residentCountry_not?: Maybe<String>;
  residentCountry_in?: Maybe<String[] | String>;
  residentCountry_not_in?: Maybe<String[] | String>;
  residentCountry_lt?: Maybe<String>;
  residentCountry_lte?: Maybe<String>;
  residentCountry_gt?: Maybe<String>;
  residentCountry_gte?: Maybe<String>;
  residentCountry_contains?: Maybe<String>;
  residentCountry_not_contains?: Maybe<String>;
  residentCountry_starts_with?: Maybe<String>;
  residentCountry_not_starts_with?: Maybe<String>;
  residentCountry_ends_with?: Maybe<String>;
  residentCountry_not_ends_with?: Maybe<String>;
  others?: Maybe<String>;
  others_not?: Maybe<String>;
  others_in?: Maybe<String[] | String>;
  others_not_in?: Maybe<String[] | String>;
  others_lt?: Maybe<String>;
  others_lte?: Maybe<String>;
  others_gt?: Maybe<String>;
  others_gte?: Maybe<String>;
  others_contains?: Maybe<String>;
  others_not_contains?: Maybe<String>;
  others_starts_with?: Maybe<String>;
  others_not_starts_with?: Maybe<String>;
  others_ends_with?: Maybe<String>;
  others_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  reset_password_token?: Maybe<String>;
  reset_password_token_not?: Maybe<String>;
  reset_password_token_in?: Maybe<String[] | String>;
  reset_password_token_not_in?: Maybe<String[] | String>;
  reset_password_token_lt?: Maybe<String>;
  reset_password_token_lte?: Maybe<String>;
  reset_password_token_gt?: Maybe<String>;
  reset_password_token_gte?: Maybe<String>;
  reset_password_token_contains?: Maybe<String>;
  reset_password_token_not_contains?: Maybe<String>;
  reset_password_token_starts_with?: Maybe<String>;
  reset_password_token_not_starts_with?: Maybe<String>;
  reset_password_token_ends_with?: Maybe<String>;
  reset_password_token_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface HerdUpdateOneRequiredWithoutCowsInput {
  create?: Maybe<HerdCreateWithoutCowsInput>;
  update?: Maybe<HerdUpdateWithoutCowsDataInput>;
  upsert?: Maybe<HerdUpsertWithoutCowsInput>;
  connect?: Maybe<HerdWhereUniqueInput>;
}

export interface HerdUpdateManyMutationInput {
  image?: Maybe<String>;
  location?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface HerdUpdateWithoutCowsDataInput {
  herdsman?: Maybe<UserUpdateOneRequiredInput>;
  image?: Maybe<String>;
  location?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface CowScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  weight?: Maybe<Float>;
  weight_not?: Maybe<Float>;
  weight_in?: Maybe<Float[] | Float>;
  weight_not_in?: Maybe<Float[] | Float>;
  weight_lt?: Maybe<Float>;
  weight_lte?: Maybe<Float>;
  weight_gt?: Maybe<Float>;
  weight_gte?: Maybe<Float>;
  heal?: Maybe<Int>;
  heal_not?: Maybe<Int>;
  heal_in?: Maybe<Int[] | Int>;
  heal_not_in?: Maybe<Int[] | Int>;
  heal_lt?: Maybe<Int>;
  heal_lte?: Maybe<Int>;
  heal_gt?: Maybe<Int>;
  heal_gte?: Maybe<Int>;
  device?: Maybe<String>;
  device_not?: Maybe<String>;
  device_in?: Maybe<String[] | String>;
  device_not_in?: Maybe<String[] | String>;
  device_lt?: Maybe<String>;
  device_lte?: Maybe<String>;
  device_gt?: Maybe<String>;
  device_gte?: Maybe<String>;
  device_contains?: Maybe<String>;
  device_not_contains?: Maybe<String>;
  device_starts_with?: Maybe<String>;
  device_not_starts_with?: Maybe<String>;
  device_ends_with?: Maybe<String>;
  device_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CowScalarWhereInput[] | CowScalarWhereInput>;
  OR?: Maybe<CowScalarWhereInput[] | CowScalarWhereInput>;
  NOT?: Maybe<CowScalarWhereInput[] | CowScalarWhereInput>;
}

export interface HerdCreateInput {
  id?: Maybe<ID_Input>;
  herdsman: UserCreateOneInput;
  image?: Maybe<String>;
  location?: Maybe<String>;
  cows?: Maybe<CowCreateManyWithoutHerdInput>;
  status: Boolean;
}

export interface CowUpdateWithWhereUniqueWithoutHerdInput {
  where: CowWhereUniqueInput;
  data: CowUpdateWithoutHerdDataInput;
}

export interface CowUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface HerdUpsertWithoutCowsInput {
  update: HerdUpdateWithoutCowsDataInput;
  create: HerdCreateWithoutCowsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  profession?: Maybe<String>;
  localisation?: Maybe<String>;
  nativeCountry?: Maybe<String>;
  residentCountry?: Maybe<String>;
  others?: Maybe<String>;
  password?: Maybe<String>;
  status?: Maybe<Boolean>;
  reset_password_token?: Maybe<String>;
}

export interface CowWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  weight?: Maybe<Float>;
  weight_not?: Maybe<Float>;
  weight_in?: Maybe<Float[] | Float>;
  weight_not_in?: Maybe<Float[] | Float>;
  weight_lt?: Maybe<Float>;
  weight_lte?: Maybe<Float>;
  weight_gt?: Maybe<Float>;
  weight_gte?: Maybe<Float>;
  heal?: Maybe<Int>;
  heal_not?: Maybe<Int>;
  heal_in?: Maybe<Int[] | Int>;
  heal_not_in?: Maybe<Int[] | Int>;
  heal_lt?: Maybe<Int>;
  heal_lte?: Maybe<Int>;
  heal_gt?: Maybe<Int>;
  heal_gte?: Maybe<Int>;
  herd?: Maybe<HerdWhereInput>;
  device?: Maybe<String>;
  device_not?: Maybe<String>;
  device_in?: Maybe<String[] | String>;
  device_not_in?: Maybe<String[] | String>;
  device_lt?: Maybe<String>;
  device_lte?: Maybe<String>;
  device_gt?: Maybe<String>;
  device_gte?: Maybe<String>;
  device_contains?: Maybe<String>;
  device_not_contains?: Maybe<String>;
  device_starts_with?: Maybe<String>;
  device_not_starts_with?: Maybe<String>;
  device_ends_with?: Maybe<String>;
  device_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CowWhereInput[] | CowWhereInput>;
  OR?: Maybe<CowWhereInput[] | CowWhereInput>;
  NOT?: Maybe<CowWhereInput[] | CowWhereInput>;
}

export interface CowUpdateWithoutHerdDataInput {
  height?: Maybe<Float>;
  weight?: Maybe<Float>;
  heal?: Maybe<Int>;
  images?: Maybe<CowUpdateimagesInput>;
  device?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export type HerdWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  profession?: Maybe<String>;
  localisation?: Maybe<String>;
  nativeCountry?: Maybe<String>;
  residentCountry?: Maybe<String>;
  others?: Maybe<String>;
  password?: Maybe<String>;
  status?: Maybe<Boolean>;
  reset_password_token?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  phone: String;
  profession: String;
  localisation: String;
  nativeCountry: String;
  residentCountry: String;
  others: String;
  password: String;
  status: Boolean;
  reset_password_token?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  profession: () => Promise<String>;
  localisation: () => Promise<String>;
  nativeCountry: () => Promise<String>;
  residentCountry: () => Promise<String>;
  others: () => Promise<String>;
  password: () => Promise<String>;
  status: () => Promise<Boolean>;
  reset_password_token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  localisation: () => Promise<AsyncIterator<String>>;
  nativeCountry: () => Promise<AsyncIterator<String>>;
  residentCountry: () => Promise<AsyncIterator<String>>;
  others: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  reset_password_token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CowEdge {
  node: Cow;
  cursor: String;
}

export interface CowEdgePromise extends Promise<CowEdge>, Fragmentable {
  node: <T = CowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CowEdgeSubscription
  extends Promise<AsyncIterator<CowEdge>>,
    Fragmentable {
  node: <T = CowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Herd {
  id: ID_Output;
  image?: String;
  location?: String;
  status: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HerdPromise extends Promise<Herd>, Fragmentable {
  id: () => Promise<ID_Output>;
  herdsman: <T = UserPromise>() => T;
  image: () => Promise<String>;
  location: () => Promise<String>;
  cows: <T = FragmentableArray<Cow>>(args?: {
    where?: CowWhereInput;
    orderBy?: CowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HerdSubscription
  extends Promise<AsyncIterator<Herd>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  herdsman: <T = UserSubscription>() => T;
  image: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  cows: <T = Promise<AsyncIterator<CowSubscription>>>(args?: {
    where?: CowWhereInput;
    orderBy?: CowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HerdNullablePromise
  extends Promise<Herd | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  herdsman: <T = UserPromise>() => T;
  image: () => Promise<String>;
  location: () => Promise<String>;
  cows: <T = FragmentableArray<Cow>>(args?: {
    where?: CowWhereInput;
    orderBy?: CowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CowConnection {
  pageInfo: PageInfo;
  edges: CowEdge[];
}

export interface CowConnectionPromise
  extends Promise<CowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CowEdge>>() => T;
  aggregate: <T = AggregateCowPromise>() => T;
}

export interface CowConnectionSubscription
  extends Promise<AsyncIterator<CowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCowSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  phone: String;
  profession: String;
  localisation: String;
  nativeCountry: String;
  residentCountry: String;
  others: String;
  password: String;
  status: Boolean;
  reset_password_token?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  profession: () => Promise<String>;
  localisation: () => Promise<String>;
  nativeCountry: () => Promise<String>;
  residentCountry: () => Promise<String>;
  others: () => Promise<String>;
  password: () => Promise<String>;
  status: () => Promise<Boolean>;
  reset_password_token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  localisation: () => Promise<AsyncIterator<String>>;
  nativeCountry: () => Promise<AsyncIterator<String>>;
  residentCountry: () => Promise<AsyncIterator<String>>;
  others: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  reset_password_token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  profession: () => Promise<String>;
  localisation: () => Promise<String>;
  nativeCountry: () => Promise<String>;
  residentCountry: () => Promise<String>;
  others: () => Promise<String>;
  password: () => Promise<String>;
  status: () => Promise<Boolean>;
  reset_password_token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface HerdSubscriptionPayload {
  mutation: MutationType;
  node: Herd;
  updatedFields: String[];
  previousValues: HerdPreviousValues;
}

export interface HerdSubscriptionPayloadPromise
  extends Promise<HerdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HerdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HerdPreviousValuesPromise>() => T;
}

export interface HerdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HerdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HerdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HerdPreviousValuesSubscription>() => T;
}

export interface CowPreviousValues {
  id: ID_Output;
  height: Float;
  weight: Float;
  heal: Int;
  images: String[];
  device?: String;
  status: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CowPreviousValuesPromise
  extends Promise<CowPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  height: () => Promise<Float>;
  weight: () => Promise<Float>;
  heal: () => Promise<Int>;
  images: () => Promise<String[]>;
  device: () => Promise<String>;
  status: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CowPreviousValuesSubscription
  extends Promise<AsyncIterator<CowPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  height: () => Promise<AsyncIterator<Float>>;
  weight: () => Promise<AsyncIterator<Float>>;
  heal: () => Promise<AsyncIterator<Int>>;
  images: () => Promise<AsyncIterator<String[]>>;
  device: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateHerd {
  count: Int;
}

export interface AggregateHerdPromise
  extends Promise<AggregateHerd>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHerdSubscription
  extends Promise<AsyncIterator<AggregateHerd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CowSubscriptionPayload {
  mutation: MutationType;
  node: Cow;
  updatedFields: String[];
  previousValues: CowPreviousValues;
}

export interface CowSubscriptionPayloadPromise
  extends Promise<CowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CowPreviousValuesPromise>() => T;
}

export interface CowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CowPreviousValuesSubscription>() => T;
}

export interface HerdEdge {
  node: Herd;
  cursor: String;
}

export interface HerdEdgePromise extends Promise<HerdEdge>, Fragmentable {
  node: <T = HerdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HerdEdgeSubscription
  extends Promise<AsyncIterator<HerdEdge>>,
    Fragmentable {
  node: <T = HerdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Cow {
  id: ID_Output;
  height: Float;
  weight: Float;
  heal: Int;
  images: String[];
  device?: String;
  status: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CowPromise extends Promise<Cow>, Fragmentable {
  id: () => Promise<ID_Output>;
  height: () => Promise<Float>;
  weight: () => Promise<Float>;
  heal: () => Promise<Int>;
  herd: <T = HerdPromise>() => T;
  images: () => Promise<String[]>;
  device: () => Promise<String>;
  status: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CowSubscription
  extends Promise<AsyncIterator<Cow>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  height: () => Promise<AsyncIterator<Float>>;
  weight: () => Promise<AsyncIterator<Float>>;
  heal: () => Promise<AsyncIterator<Int>>;
  herd: <T = HerdSubscription>() => T;
  images: () => Promise<AsyncIterator<String[]>>;
  device: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CowNullablePromise extends Promise<Cow | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  height: () => Promise<Float>;
  weight: () => Promise<Float>;
  heal: () => Promise<Int>;
  herd: <T = HerdPromise>() => T;
  images: () => Promise<String[]>;
  device: () => Promise<String>;
  status: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface HerdConnection {
  pageInfo: PageInfo;
  edges: HerdEdge[];
}

export interface HerdConnectionPromise
  extends Promise<HerdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HerdEdge>>() => T;
  aggregate: <T = AggregateHerdPromise>() => T;
}

export interface HerdConnectionSubscription
  extends Promise<AsyncIterator<HerdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HerdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHerdSubscription>() => T;
}

export interface HerdPreviousValues {
  id: ID_Output;
  image?: String;
  location?: String;
  status: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HerdPreviousValuesPromise
  extends Promise<HerdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  location: () => Promise<String>;
  status: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HerdPreviousValuesSubscription
  extends Promise<AsyncIterator<HerdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateCow {
  count: Int;
}

export interface AggregateCowPromise
  extends Promise<AggregateCow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCowSubscription
  extends Promise<AsyncIterator<AggregateCow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Cow",
    embedded: false
  },
  {
    name: "Herd",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
